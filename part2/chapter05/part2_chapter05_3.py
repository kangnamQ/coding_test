"""
Part 2 - Chapter 05 - Q3 (page 149)
음료수 얼려 먹기

N  * M 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시된다.
구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주한다.
이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하시오.
다음의 4 * 5 얼음 틀 예시에서는 아이스크림이 총 3개 생성된다.

0 0 1 1 0
0 0 0 1 1
1 1 1 1 1
0 0 0 0 0


입력 조건 :
    - 첫째 줄에 얼음 틀의 세로 길이 N과 가로 길이 M이 주어진다. ( 1 <= N, M <= 1,000)
    - 두 번째 줄부터 N+1번째 줄까지 얼음 틀의 형태가 주어진다.
    - 이때 구멍이 뚫려있는 부분은 0, 그렇지 않은 부분은 1이다.

출력 조건 :
    - 한 번에 만들 수 있는 아이스크림의 개수를 출력한다.

입력 예시 :
15 14
00000111100000
11111101111110
11011101101110
11011101100000
11011111111111
11011111111100
11000000011111
01111111111111
00000000011111
01111111111000
00011111111000
00000001111000
11111111110011
11100011111111
11100011111111

출력 예시 :
    8

"""
"""
++ DFS를 이용하면 간단히 해결할 수 있다
1. 특정한 지점의 주변 상, 하, 좌, 우를 살펴본 뒤에 주변 지점 중에서 값이 0이면서 아직 방문하지 않은 지점이 있다면 해당 지점을 방문한다.
2. 방문한 지점에서 다시 상, 하, 좌, 우를 살펴보면서 방문을 다시 진행하면, 연결된 모든 지점을 방문할 수 있다.
3. 1~2번의 과정을 모든 노드에 반복하며 방문하지 않은 지점의 수를 센다.
"""
# -----------------------------------
print("\n -*-*-*-*-*- First -*-*-*-*-*- \n")


N, M = map(int, input().split())
graph = []
for i in range(N):
    graph.append(list(map(int, input())))


def dfs(x, y):
    # if N <= x <= -1 or M <= y <= -1: << 이렇게하면 index 초과 에러나니 조심
    if N <= x or x <= -1 or M <= y or y <= -1:
        return False

    if graph[x][y] == 0:  # 방문하지 않았다면 방문 처리 이후 주변위 위치 탐색
        graph[x][y] = 1
        dfs(x-1, y)
        dfs(x, y-1)
        dfs(x+1, y)
        dfs(x, y+1)
        return True
    return False


# 모든 노드(위치)에 대해서 음료수 채우는 작업
result = 0
for i in range(N):
    for j in range(M):
        if dfs(i, j) == True:
            result += 1

print(result)

