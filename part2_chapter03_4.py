"""
Part 2 - Chapter 03 - Q4 (page 99)
1이 될 때 까지

어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 한다.
단, 두 번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있다.
1. N에서 1을 뺀다.
2. N을 K로 나눈다.

예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이  된다.
이후에 2번의 과정을 두 번 수행하면 N은 1이 된다.
결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 된다. 이는 N을 1로 만드는 최소 횟수이다.
N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하시오.

입력 조건 :
    - 첫째 줄에 N(2 <= N <= 100,000)과 K(2 <= K <= 100,000)가 공백으로 구분되며 각각 자연수로 주어진다. 이때 입력으로 주어지는 N은 항상 K보다 크거나 같다.
출력 조건 :
    - 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력한다

입력 예시 :
    25 5
출력 예시 :
    2
"""

# -----------------------------------
print("\n -*-*-*-*-*- First -*-*-*-*-*- \n")

N, K = map(int, input().split())
count = 0

remainder = N % K
while not remainder == 0:
    N -= 1
    remainder = N % K
    count += 1

while not N == 1:
    N //= K
    count += 1

print("최소 횟수 : ", count)

# 예제에서는 잘 작동하나 31 7, 29 13과 같은 수를 넣었을 때 무한루프를 돌음
# 문제에서는 31 7 ->  30 7 / 29 7 / 28 7 / 4 7 / 3 7 / 2 7 / 1 7 /
# 한번에 나누는 것이 아닌 가능할때까지 1씩 뺀 다음 나누고 나머지도 1씩 뺄 수 있어야함.
# 위 코드는 한번에 나눌 생각만 하고 짜서 문제가 있음.


# -----------------------------------
print("\n -*-*-*-*-*- Second -*-*-*-*-*- \n")

N, K = map(int, input().split())
result = 0

# 나눌 가능성이 있는 곳과 없는 곳 2파트로 나누어서 진행
# N이 K이상이라면 K로 계속 나누기 (나눌 수 있는 최소한의 조건까지 진행)
while N >= K:
    # N이 K로 나누어 떨어지지 않는다면 N에서 1씩 뺴기
    while N % K != 0:
        N -= 1
        result += 1
    # K로 나누기
    N //= K
    result += 1

# 마지막으로 남은 수에 대하여 1씩 빼기 (나눌 수 없다면 1씩 계속 뺴는 작업 진행)
while N > 1:
    N -= 1
    result += 1

print("최소 횟수 : ", result)


# -----------------------------------
print("\n -*-*-*-*-*- Third -*-*-*-*-*- \n")
# 직접 계산을 하며 진행하는 것이아닌 몇번 계산을 할지를 구하여 계산하는게 포인트인듯
# 이문제의 경우 최대한 많이 나누기를 수행하면서 진행함

N, K = map(int, input().split())
result = 0

while True:
    # (N == K로 나누어 떨어지는 수)가 될때까지 1씩 빼기
    target = (N // K) * K
    print(target, ", ", result)
    # 이 구조를 많이 사용하는듯?
    result += (N - target)
    N = target
    # 문제의 조건상 항상 N은 K보다 높거나 같음
    # 이 말이 무슨뜻이냐면 N에서 1씩 뺴다보면 분명 K는 1번 나오게 됨
    # 29 13으로 예를 들자면  29//13 = 2 * 13 = 26
    # result = (29 - 26) == 3
    # N = target == 26
    # 26은 13으로 나눌 수 있으며 나누게되면 N = 2, K = 13
    # N//K에서 0이나오므로 target은 0이되고 2-0 즉 2가 결과에 추가됨
    # 재밌는건 마지막으로 남은수에 대하여 1씩 빼는 부분에서 N이 이미 0이므로 -1을 더하게 되는데
    # 한번 전 상태, 즉 N이 1인 상태로 돌아가며 조건은 만족하고 코드는 간결하게 끝낼 수 있음

    # N이 K보다 작을 때(더 이상 나눌 수 없을 때) break
    if N < K:
        break
    # 이부분까지 온다면 위에서 N이 0인 상태로 진행 됬으므로 N<K를 통하여 while을 나오는 구조임
    # 따라서 if문의 위치가 해당 위치에 존재하게 됨
    # K로 나누기
    result += 1
    N //= K

# 마지막으로 남은수에 대하여 1씩 빼기
result += (N - 1)
# 이렇게 빼나 while문 안에서 돌면서 빼나 결과는 같은데 cost가 더 싸고 간결함

print("최소 횟수 : ", result)


# -----------------------------------
print("\n -*-*-*-*-*- Final -*-*-*-*-*- \n")

N, K = map(int, input().split())
result = 0

while True:
    target = (N // K) * K
    result += (N - target)
    N = target
    if N < K:
        break
    result += 1
    N //= K

result += (N - 1)
print("최소 횟수 : ", result)